var Lion = (function (exports) {
  'use strict';

  const drawRadiusRoute = (ctx, x, y, w, h, r) => {
      ctx.beginPath();
      ctx.moveTo(x + r, y);
      ctx.lineTo(x + w - r, y);
      ctx.arc(x + w - r, y + r, r, 1.5 * Math.PI, 0);
      ctx.lineTo(x + w, y + h - r);
      ctx.arc(x + w - r, y + h - r, r, 0, 0.5 * Math.PI);
      ctx.lineTo(x + r, y + h);
      ctx.arc(x + r, y + h - r, r, 0.5 * Math.PI, Math.PI);
      ctx.lineTo(x, y + r);
      ctx.arc(x + r, y + r, r, Math.PI, 1.5 * Math.PI);
      ctx.closePath();
  };
  const renderBlock = (ctx, block) => {
      const { x, y, width, height } = block;
      const { borderRadius, borderColor, borderWidth } = block.attributes;
      ctx.save();
      if (borderRadius !== undefined) {
          drawRadiusRoute(ctx, x, y, width, height, borderRadius);
      }
      ctx.fillStyle = block.attributes.backgroundColor;
      ctx.fillRect(x, y, width, height);
      ctx.restore();
  };
  const renderSprite = (ctx, sprite) => {
      if (sprite.isStatic) {
          sprite.load()
              .then((img) => {
              console.log(sprite.imgWidth);
              ctx.drawImage(img, 0, 0, sprite.imgWidth, sprite.imgHeight, sprite.width, sprite.height, sprite.x, sprite.y);
          });
      }
  };
  const RENDER_MAP = {
      'Block': renderBlock,
      'Sprite': renderSprite,
  };
  const renderWithCanvas = (layers) => {
      layers.forEach((layer) => {
          const ctx = layer._self.getContext('2d');
          layer.children.forEach((child) => {
              RENDER_MAP[child.nodeType](ctx, child);
          });
      });
  };

  class App {
      constructor(options) {
          this.root = null;
          this.layers = [];
          this._layersSortedByIndex = [];
          this.resolution = 1;
          this.nodeType = 'APP';
          this.resolution = options && options.resolution ? options.resolution : 1;
          this.handleWindowResize();
      }
      mount(element) {
          this.root = element;
      }
      sortByzIndex(layers) {
          return layers.sort((a, b) => {
              return a.attributes.zIndex - b.attributes.zIndex;
          });
      }
      render() {
          this._layersSortedByIndex = this.sortByzIndex(this.layers);
          renderWithCanvas(this._layersSortedByIndex);
      }
      append(layer) {
          if (this.root === null) {
              this.root = document.createElement('div');
              this.root.id = 'LionRoot';
              this.root.style.width = '100vw';
              this.root.style.height = '100vh';
              document.body.append(this.root);
          }
          this.handleResolution(layer._self);
          this.root.append(layer._self);
          this.layers.push(layer);
      }
      handleResolution(canvasEle) {
          const width = +getComputedStyle(this.root).width.match(/[0-9]*/) * this.resolution;
          const height = +getComputedStyle(this.root).height.match(/[0-9]*/) * this.resolution;
          canvasEle.width = width;
          canvasEle.height = height;
      }
      handleWindowResize() {
          if (window !== undefined) {
              window.onresize = () => {
                  this._layersSortedByIndex.forEach((layer) => {
                      this.handleResolution(layer._self);
                  });
                  this.render();
              };
          }
      }
  }

  let _BaseNodeId = 0;
  class BaseNode {
      constructor() {
          this.x = 0;
          this.y = 0;
          this.width = 0;
          this.height = 0;
          this.parent = null;
          this.children = [];
          this.nodeType = 'Base';
          this.attributes = {
              zIndex: 0,
              borderRadius: 0,
              borderColor: '#000000',
              borderWidth: 0,
              backgroundColor: '#000000',
              padding: [0, 0, 0, 0],
              margin: [0, 0, 0, 0],
          };
          Object.defineProperty(this, 'id', { value: _BaseNodeId++ });
      }
      copy() { }
      addEventListener() { }
      removeEventListener() { }
      removeAllListeners() { }
      attr() { }
      removeAttribute() { }
      append(child) {
          if (child instanceof BaseNode) {
              child.parent = this;
              this.children.push(child);
          }
          else {
              throw new Error('only Lion node can be appended.');
          }
      }
  }

  class Block extends BaseNode {
      constructor(options) {
          super();
          this.nodeType = 'Block';
          this.x = options.x;
          this.y = options.y;
          this.width = options.width;
          this.height = options.height;
          this.children = options.children !== undefined ? options.children : this.children;
      }
  }

  class Layer extends BaseNode {
      constructor(options) {
          super();
          this.nodeType = 'layer';
          this.attributes.zIndex = options.zIndex !== undefined ? options.zIndex : 1;
          this.attributes.backgroundColor =
              options.backgroundColor !== undefined ? options.backgroundColor : '#000000';
          this.children = options.children !== undefined ? options.children : [];
          this.init();
      }
      init() {
          const canvas = document.createElement('canvas');
          canvas.style.position = 'absolute';
          canvas.style.width = `100%`;
          canvas.style.height = `100%`;
          canvas.style.backgroundColor = this.attributes.backgroundColor;
          canvas.style.zIndex = `${this.attributes.zIndex}`;
          canvas.width = this.width;
          canvas.height = this.height;
          this._self = canvas;
      }
  }

  class Sprite extends BaseNode {
      constructor(options) {
          super();
          this.isStatic = true;
          this.imgWidth = 0;
          this.imgHeight = 0;
          this._img = null;
          this.clip = {};
          this.nodeType = 'Sprite';
          this.x = options.x;
          this.y = options.y;
          this.width = options.width;
          this.height = options.height;
          this.src = options.src;
          options.isStatic !== undefined ? this.isStatic = options.isStatic : null;
          this.load();
      }
      load() {
          if (this._img !== null) {
              return Promise.resolve(this._img);
          }
          const imageSource = this.src;
          if (typeof imageSource === 'string') {
              const img = document.createElement('img');
              img.setAttribute('crossOrigin', 'Anonymous');
              img.src = imageSource;
              return new Promise((resolve, reject) => {
                  img.onload = () => {
                      this._img = img;
                      this.imgWidth = img.width;
                      this.imgHeight = img.height;
                      resolve(img);
                  };
                  img.onerror = (err) => {
                      console.warn('img load error:', err);
                      reject(err);
                  };
              });
          }
          else {
              return new Promise((resolve, reject) => {
              });
          }
      }
  }

  exports.App = App;
  exports.BaseNode = BaseNode;
  exports.Block = Block;
  exports.Layer = Layer;
  exports.Sprite = Sprite;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
